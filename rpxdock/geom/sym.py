import numpy as np
from rpxdock.data import datadir
from rpxdock import homog as hm

tetrahedral_frames = np.load(datadir + "/tetrahedral_frames.pickle", allow_pickle=True)
octahedral_frames = np.load(datadir + "/octahedral_frames.pickle", allow_pickle=True)
icosahedral_frames = np.load(datadir + "/icosahedral_frames.pickle", allow_pickle=True)

def symframes(sym, positions=None, axis=[0, 0, 1]):
   if isinstance(sym, (int, np.int32, np.int64, np.uint32, np.uint64)):
      sym = int(sym)
   if isinstance(sym, np.ndarray):
      assert len(sym) == 1
      sym = int(sym[0])
   if isinstance(sym, int) or sym.startswith("C"):
      if not isinstance(sym, int): sym = int(sym[1:])
      return list(hm.hrot(axis, np.arange(sym) / sym * 360))
   if sym.startswith("D"):
      assert np.allclose(axis, [0, 0, 1])
      if '_' not in sym:
         nsym = int(sym[1:])
      else:
         nsym = int(sym[1:sym.find('_')])
      frames_up = list(hm.hrot([0, 0, 1], np.arange(nsym) / nsym * 360))
      frames_dn = list(hm.hrot([1, 0, 0], np.pi) @ frames_up)
      return np.array(frames_up + frames_dn)
   if sym.startswith("T"):
      return tetrahedral_frames
   if sym.startswith("O"):
      return octahedral_frames
   if sym.startswith("I"):
      return icosahedral_frames
   if sym == 'P6_632':
      c6 = hm.hrot(axis, np.arange(6) / 6 * 360)
      c3 = hm.hrot(axis,
                   np.arange(3) / 3 * 360, center=[positions[1, 0, 3], positions[1, 1, 3], 0])
      c2 = hm.hrot(axis,
                   np.arange(2) / 2 * 360, center=[positions[2, 0, 3], positions[2, 1, 3], 0])
      frames = c6[None, None, :] @ c3[None, :, None] @ c2[:, None, None]
      # frames = (c6[:, None, None, None] @ c2[None, :, None, None] @ c3[None, None, :, None]
      # @ c6[None, None, None, :])
      # frames = c3[None, :, None] @ c2[:, None, None]
      # frames = np.concatenate([c6, c3, c2])
      # frames = c6
      # frames = np.eye(4)
      return frames.reshape(-1, 4, 4)
      


   if  sym[:2] == 'P4':          # all options of P4 (1, 2, and 3 components assemblies 
      if len(sym)==4:            # case of one component 
         if sym[2]=="_":         # case when the components have symilar vertical orientation, plane symmetry p4 and 2 DOFs: rotation and cell spacing  
            c4 = hm.hrot(axis, np.arange(4) / 4 * 360)   
            c4b = hm.hrot(axis, np.arange(4) / 4 * 360, center=[positions[0, 0, 3], positions[0, 1, 3], 0])
            frames = c4[ None, :] @ c4b[ :, None] # @ c2[:, None, None]
         if symp[2]=="m":        # case of checkmate like vertical orientation, plane symmetry p4m and 3 DOFs: rotation, cell spacing, and vertical translation 
            c4 = hm.hrot(axis, np.arange(4) / 4 * 360)   
            c4b = hm.hrot(axis, np.arange(4) / 4 * 360, center=[positions[0, 0, 3], positions[0, 1, 3], 0])
            frames = c4[ None, :] @ c4b[ :, None] 
         return frames.reshape(-1, 4, 4)


      if len(sym)==5:            # This is for 2 component P4 designs (4 DOFs) - 2 rottions, 1 z translation, 1 cell spacing , should allow fliping one of the components (2 times more options)
         c4 = hm.hrot(axis, np.arange(4) / 4 * 360)
         c42 = hm.hrot(axis, np.arange(int(sym[5])) / int(sym[5]) * 360, center=[positions[1, 0, 3], positions[1, 1, 3], 0])
         frames = c4[ None, :] @ c42[ :, None] 
         return frames.reshape(-1, 4, 4)


      if len(sym)==6:            # This is for 3 component P4 designs (6 DOFs) - 3 rottions, 2 z translation, 1 cell spacing , should allow fliping two of the components (4 times more options)
         c4 = hm.hrot(axis, np.arange(4) / 4 * 360)
         c4b = hm.hrot(axis, np.arange(4) / 4 * 360, center=[positions[1, 0, 3], positions[1, 1, 3], 0])
         c2 = hm.hrot(axis, np.arange(2) / 2 * 360, center=[positions[2, 0, 3], positions[2, 1, 3], 0])
         frames = c4[None, None, :] @ c4b[None, :, None] @ c2[:, None, None]
         return frames.reshape(-1, 4, 4)





frames = dict(T=tetrahedral_frames, O=octahedral_frames, I=icosahedral_frames)

tetrahedral_axes = {
   2: hm.hnormalized([1, 0, 0]),
   3: hm.hnormalized([1, 1, 1]),
   33: hm.hnormalized([1, 1, -1]),
}  # other c3
octahedral_axes = {
   2: hm.hnormalized([1, 1, 0]),
   3: hm.hnormalized([1, 1, 1]),
   4: hm.hnormalized([1, 0, 0]),
}
icosahedral_axes = {
   2: hm.hnormalized([1, 0, 0]),
   3: hm.hnormalized([0.934172, 0.000000, 0.356822]),
   5: hm.hnormalized([0.850651, 0.525731, 0.000000]),
}
dihedral_axes = {
   2: hm.hnormalized([1, 0, 0]),
   22: hm.hnormalized([0, 0, 1]),
   3: hm.hnormalized([0, 0, 1]),
   4: hm.hnormalized([0, 0, 1]),
   5: hm.hnormalized([0, 0, 1]),
   6: hm.hnormalized([0, 0, 1]),
   7: hm.hnormalized([0, 0, 1]),
   8: hm.hnormalized([0, 0, 1]),
   9: hm.hnormalized([0, 0, 1]),
   10: hm.hnormalized([0, 0, 1]),
   11: hm.hnormalized([0, 0, 1]),
   12: hm.hnormalized([0, 0, 1]),
}
axes = dict(T=tetrahedral_axes, O=octahedral_axes, I=icosahedral_axes, D=dihedral_axes)
for i in range(2, 13):
   axes[f'D{i}'] = axes['D']

to_neighbor_olig = dict(
   T={
      2: frames["T"][2],
      3: frames["T"][1],
      33: frames["T"][1]
   },
   O={
      2: frames["O"][2],
      3: frames["O"][1],
      4: frames["O"][1]
   },
   I={
      2: frames["I"][1],
      3: frames["I"][1],
      5: frames["I"][2]
   },
   D22={
      2: hm.hrot([0, 0, 1], np.pi),
      22: hm.hrot([1, 0, 0], np.pi),
   },
   D2={
      2: hm.hrot([0, 1, 0], np.pi),
   },
)

axes_second = {s: {k: to_neighbor_olig[s][k] @ v for k, v in axes[s].items()} for s in "TOI"}

axes_second['D22'] = {
   2: to_neighbor_olig['D22'][2] @ dihedral_axes[2],
   22: to_neighbor_olig['D22'][22] @ dihedral_axes[22],
}
axes_second['D2'] = {
   2: to_neighbor_olig['D2'][2] @ dihedral_axes[2],
}

for i in range(3, 13):
   to_neighbor_olig[f'D{i}'] = {
      2: hm.hrot([0, 0, 1], 2 * np.pi / i),
      i: hm.hrot([1, 0, 0], np.pi),
   }
   to_neighbor_olig[f'D{i}2'] = to_neighbor_olig[f'D{i}']

   axes_second[f'D{i}'] = {
      2: to_neighbor_olig[f'D{i}'][2] @ dihedral_axes[2],
      i: to_neighbor_olig[f'D{i}'][i] @ dihedral_axes[i],
   }
   axes_second[f'D{i}2'] = axes_second[f'D{i}']

# for i in range(2, 13):
#    axes[f'D{i}'] = axes['D']
#    axes_second[f'D{i}'] = axes_second['D']

# tetrahedral_frames = np.array(
# [
# (
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, +1.000000, +0.000000),
# (+1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (-0.000000, -0.000000, -1.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, -0.000000, -1.000000, +0.000000),
# (-1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +0.000000, +1.000000, +0.000000),
# (+1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, -0.000000, -1.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, -1.000000, +0.000000),
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (-0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +0.000000, +1.000000, +0.000000),
# (-1.000000, +0.000000, -0.000000, +0.000000),
# (-0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, +0.000000, -0.000000, +0.000000),
# (-0.000000, -1.000000, +0.000000, +0.000000),
# (-0.000000, +0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# ]
# )
#
# octahedral_frames = np.array(
# [
# (
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (-0.000000, -1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (-0.000000, -0.000000, +1.000000, +0.000000),
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, -1.000000, -0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +0.000000, -1.000000, +0.000000),
# (-0.000000, -1.000000, -0.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (-0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (-0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# ]
# )
#
# icosahedral_frames = np.array(
# [
# (
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (+0.000000, -0.000000, +1.000000, +0.000000),
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +1.000000, +0.000000, +0.000000),
# (-0.000000, +0.000000, -1.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (+1.000000, -0.000000, -0.000000, +0.000000),
# (+0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (-1.000000, +0.000000, +0.000000, +0.000000),
# (-0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (-0.000000, -0.000000, -1.000000, +0.000000),
# (+1.000000, +0.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, -1.000000, +0.000000),
# (+1.000000, +0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, +0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (+0.000000, -0.000000, -1.000000, +0.000000),
# (-1.000000, -0.000000, -0.000000, +0.000000),
# (-0.000000, +1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (+0.000000, -1.000000, -0.000000, +0.000000),
# (+0.000000, +0.000000, +1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-1.000000, -0.000000, +0.000000, +0.000000),
# (-0.000000, +1.000000, +0.000000, +0.000000),
# (-0.000000, -0.000000, -1.000000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (+0.309017, +0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (+0.309017, +0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (+0.309017, -0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (+0.309017, -0.500000, +0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (+0.500000, +0.809017, -0.309017, +0.000000),
# (-0.809017, +0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, +0.500000, +0.809017, +0.000000),
# (-0.500000, -0.809017, +0.309017, +0.000000),
# (+0.809017, -0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (+0.500000, +0.809017, +0.309017, +0.000000),
# (+0.809017, -0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, +0.500000, -0.809017, +0.000000),
# (-0.500000, -0.809017, -0.309017, +0.000000),
# (-0.809017, +0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (+0.500000, -0.809017, -0.309017, +0.000000),
# (+0.809017, +0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, -0.500000, +0.809017, +0.000000),
# (-0.500000, +0.809017, +0.309017, +0.000000),
# (-0.809017, -0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (+0.500000, -0.809017, +0.309017, +0.000000),
# (-0.809017, -0.309017, +0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# (
# (-0.309017, -0.500000, -0.809017, +0.000000),
# (-0.500000, +0.809017, -0.309017, +0.000000),
# (+0.809017, +0.309017, -0.500000, +0.000000),
# (+0.000000, +0.000000, +0.000000, +1.000000),
# ),
# ]
# )
#
# tetrahedral_frames.dump("rpxdock/data/tetrahedral_frames.pickle")
# octahedral_frames.dump("rpxdock/data/octahedral_frames.pickle")
# icosahedral_frames.dump("rpxdock/data/icosahedral_frames.pickle")
